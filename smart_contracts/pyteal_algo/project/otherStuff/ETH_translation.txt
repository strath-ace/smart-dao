#with open('algoERC725.teal', 'w') as f:
#    compiled = compileTeal(approval_program(), Mode.Application, version=6)
#    f.write(compiled)


# ERC725.sol brings ERC725XCore and ERC725YCore together
# ERC725X and ERC725Y are the ownership contracts of the core equivalent

# X Core
## Allows execution and deployement of other smart contracts

## executeCall
## (internal virtual)
## input
## - address to (The address on which call is executed)
## - uint256 value (The value to be sent with the call)
## - bytes memory data (The data to be sent with the call)
## process
## - Call smart contract @ address to with inputs data and value
## - Verify call result
## - emit executed(OPERATION_CALL, to, value, bytes4(data))
## output
## - bytes memory result (The data from the call)

## executeStaticCall
## (internal virtual)
## input
## - address to (The address on which staticCall is executed)
## - uint256 value (The value to be sent to the execute (MUST be 0)?)
## - bytes memory data (The data to be sent with the staticCall)
## process
## - require that value == 0 (SaticCall cannot transfer value)
## - call staticCall smart contract @ address to with input data
## - Verify call result
## - emit executed(OPERATION_STATICCALL, to, value, bytes4(data))
## output
## - bytes memory result (The data returned from staticCall)

## executeDelegateCall
## (internal virtual)
## input
## - address to (The address on which delegateCall is executed)
## - uint256 value (The value to be sent to the execute (MUST be 0)?)
## - bytes memory data (The data to be sent with the delegateCall)
## process
## - require that value == 0 (delegateCall cannot transfer value)
## - call delegateCall smart contract @ address to with input data
## - Verify call result
## - emit executed(OPERATION_STATICCALL, to, value, bytes4(data))
## output
## - bytes memory result (The data returned from delegateCall)

## deployCreate
## (internal virtual)
## input
## - address to (The address on which create is executed (Must be 0))
## - uint256 value (The value to be sent to the execute)
## - bytes memory data (The contract bytecode to deploy)
## process
## - require that address to == address(0)
## - require that bytecode does not have length 0 (check not empty)
## - create variable called contractAddress of type address
## - create smart contract returning the contractAddress
## - require contractAddress no longer == 0
## - abi encoded address of contractAddress variable
## - emit executed(OPERATION_STATICCALL, to, value, bytes4(data))
## output
## - bytes memory newContract (The address of the new contract as bytes)

## deployCreate2 - alternative deployment method
## (internal virtual)
## input
## - address to (The address on which create is executed (Must be 0))
## - uint256 value (The value to be sent to the execute)
## - bytes memory data (The contract bytecode to deploy)
## process
## - require that address to == address(0)
## - require that bytecode does not have length 0 (check not empty)
## - convert data from type 
## - create variable called contractAddress of type address
## - create smart contract returning the contractAddress
## - require contractAddress no longer == 0
## - abi encoded address of contractAddress variable
## - emit executed(OPERATION_STATICCALL, to, value, bytes4(data))
## output
## - bytes memory newContract (The address of the new contract as bytes)

# Y Core
## Allows storage of data

## https://pyteal.readthedocs.io/en/stable/state.html
## Relys on mapping between a key and data stored at that key

## getData single
## getData list
## setData single
## setData list
## uncheckedIncrement?

## ERC725.sol
# - Import Scripts
#       ERC165.sol
#       OwnableUnset.sol
#       ERC725XCore.sol
#       ERC725YCore.sol
# - Import Constants
#       _INTERFACEID_ERC725X
#       _INTERFACEID_ERC725Y
#       Both from constants.sol
# - Contract ERC725 is:
#       ERC725XCore
#       ERC725YCore
# - New Owner Function (Check owner address is real address (non-zero))
#       Set owner of ownableUnset to input newOnwer
# - Supports interface function (public, view, virtual, override, return bool)
#       if InterfaceId == _INTERFACEID_ERC725X OR
#       if InterfaceId == _INTERFACEID_ERC725Y OR
#       super.supportsInterface(interfaceId)

## ERC725XCore.sol
# - Import Scripts
#       IERC165.sol
#       IERC725X.sol
#       Create2.sol
#       Address.sol
#       BytesLib.sol  ???
#       ERC165.sol
#       OwnableUnset.sol
# - Import Constants
#       _INTERFACEID_ERC725X
#       OPERATION_CALL
#       OPERATION_DELEGATECALL
#       OPERATION_STATICCALL
#       OPERATION_CREATE
#       OPERATION_CREATE2
#       All from constants.sol
# - execute function (public payable virtual override onlyOwner returns(bytes memory)) (uint256 operation, address to, uint256 value, bytes memory data)
#       check "require" sender balance >= value, if not return insufficient balance message
#       if operation == OPERATION_CALL: return _executeCall(to, value, data)
#       if operation == OPERATION_CREATE: return _deployCreate(to, value, data)
#       if operation == OPERATION_CREATE: return _deployCreate2(to, value, data)
#       if operation == OPERATION_STATICCALL: return _executeStaticCall(to, value, data)
#       !HIGH RISK! Check sol doc if operation == OPERATION_DELEGATECALL: return _executeDelegateCall(to, value, data)
#       else: return "Unknown operation type"
# - Supports interface function (public, view, virtual, override, return bool) "Override function?"
#       if InterfaceId == _INTERFACEID_ERC725X OR
#       super.supportsInterface(interfaceId)
# - _executeCall function (internal vitural returns(bytes memory result)) (address to, uint256 value, bytes memory data)
#       ?? // solhint-disable avoid-low-level calls
#       to.call{}

## ERC725YCore.sol
